üöÄ CRYPTO TRADING BOT - AWS DEPLOYMENT GUIDE
==============================================

üìã DEPLOYMENT DETAILS:
- Key File: C:\Users\miste\Downloads\cryptobot-key.pem
- AWS Instance: ubuntu@3.135.216.32
- Target Directory: ~/cryptobot/crypto-trading-bot/

üîß STEP 1: PREPARE FILES FOR UPLOAD
===================================

Essential files to upload (copy to a temp folder first):

CORE APPLICATION FILES:
‚úÖ bot.py
‚úÖ config.py
‚úÖ enhanced_config.json
‚úÖ requirements.txt

STRATEGY MODULES:
‚úÖ enhanced_multi_strategy.py
‚úÖ institutional_strategies.py
‚úÖ log_utils.py
‚úÖ performance_tracker.py
‚úÖ enhanced_config.py
‚úÖ state_manager.py
‚úÖ success_rate_enhancer.py

STRATEGY FOLDER:
‚úÖ strategies/ma_crossover.py
‚úÖ strategies/multi_strategy_optimized.py
‚úÖ strategies/hybrid_strategy.py

STATE FILES (OPTIONAL - for continuity):
üìä bot_state.json
üìä trade_log.csv
üìä performance_report.csv

üì§ STEP 2: UPLOAD FILES TO AWS
===============================

Open PowerShell/Command Prompt and run these commands:

# 1. Set proper permissions for your key file
icacls "C:\Users\miste\Downloads\cryptobot-key.pem" /inheritance:r /grant:r "%USERNAME%:(R)"

# 2. Create the directory structure on AWS
ssh -i "C:\Users\miste\Downloads\cryptobot-key.pem" ubuntu@3.135.216.32 "mkdir -p ~/cryptobot/crypto-trading-bot/strategies"

# 3. Upload core files
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" bot.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" config.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" enhanced_config.json ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" requirements.txt ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/

# 4. Upload support modules
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" enhanced_multi_strategy.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" institutional_strategies.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" log_utils.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" performance_tracker.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" enhanced_config.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" state_manager.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" success_rate_enhancer.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/

# 5. Upload strategy files
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" strategies/ma_crossover.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/strategies/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" strategies/multi_strategy_optimized.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/strategies/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" strategies/hybrid_strategy.py ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/strategies/

# 6. Upload state files (optional)
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" bot_state.json ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" trade_log.csv ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/
scp -i "C:\Users\miste\Downloads\cryptobot-key.pem" performance_report.csv ubuntu@3.135.216.32:~/cryptobot/crypto-trading-bot/

üîß STEP 3: SSH INTO AWS AND SETUP
==================================

# Connect to your AWS instance
ssh -i "C:\Users\miste\Downloads\cryptobot-key.pem" ubuntu@3.135.216.32

# Navigate to bot directory
cd ~/cryptobot/crypto-trading-bot/

# Create virtual environment
python3 -m venv crypto_bot_env

# Activate virtual environment
source crypto_bot_env/bin/activate

# Upgrade pip
pip install --upgrade pip

# Install dependencies
pip install -r requirements.txt

# Make bot executable
chmod +x bot.py

# Create __init__.py for strategies folder
touch strategies/__init__.py

# Test the bot connection (optional)
python3 -c "
try:
    from config import BINANCE_API_KEY, BINANCE_API_SECRET
    print('‚úÖ Config loaded successfully')
    print(f'API Key: {BINANCE_API_KEY[:8]}...')
    print('‚úÖ Ready to test bot')
except Exception as e:
    print(f'‚ùå Error: {e}')
"

üöÄ STEP 4: CREATE SYSTEMD SERVICE FOR AUTO-RESTART
===================================================

# Create the service file
sudo nano /etc/systemd/system/crypto-trading-bot.service

# Paste this content into the file:
[Unit]
Description=Crypto Trading Bot
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory=/home/ubuntu/cryptobot/crypto-trading-bot
Environment=PATH=/home/ubuntu/cryptobot/crypto-trading-bot/crypto_bot_env/bin
Environment=PYTHONUNBUFFERED=1
ExecStart=/home/ubuntu/cryptobot/crypto-trading-bot/crypto_bot_env/bin/python bot.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target

# Save and exit (Ctrl+X, Y, Enter)

# Enable and start the service
sudo systemctl daemon-reload
sudo systemctl enable crypto-trading-bot.service
sudo systemctl start crypto-trading-bot.service

üìä STEP 5: MONITOR THE BOT
==========================

# Check service status
sudo systemctl status crypto-trading-bot.service

# View live logs (real-time)
sudo journalctl -u crypto-trading-bot.service -f

# View recent logs
sudo journalctl -u crypto-trading-bot.service --since "10 minutes ago"

# Check if bot is running
ps aux | grep bot.py

üîß USEFUL COMMANDS
==================

# Restart the bot
sudo systemctl restart crypto-trading-bot.service

# Stop the bot
sudo systemctl stop crypto-trading-bot.service

# View logs from last hour
sudo journalctl -u crypto-trading-bot.service --since "1 hour ago"

# Manual test (activate environment first)
source crypto_bot_env/bin/activate
python3 bot.py

# Check bot files
ls -la ~/cryptobot/crypto-trading-bot/

# Monitor system resources
htop

üö® SECURITY NOTES
=================

1. Your API keys are in config.py - consider using environment variables for production
2. Never expose your .pem key file or API keys in logs
3. Regularly monitor your bot's performance and account balance
4. Set up CloudWatch or other monitoring if desired

‚úÖ EXPECTED RESULT
==================

After setup, your bot will:
- Run automatically with day trader optimizations (58% confidence threshold)
- Restart automatically if it crashes
- Log every 60 seconds with real-time output
- Continue from where it left off (if you uploaded state files)
- Trade with 10-minute cooldowns between trades
- Use sophisticated institutional strategies and risk management

üéØ You should see logs like:
==================================================
RUNNING TRADING STRATEGY LOOP
==================================================
üïê Loop Started: 2025-07-06 15:30:00
üìâ Daily PnL: $0.00
üéØ INSTITUTIONAL MULTI-STRATEGY SIGNAL: HOLD at $56789.12
   Overall Confidence: 0.30
üíì Loop completed, sleeping for 60 seconds...
